list <- gen_data(mat =hsk, 100)
hsk <- round(abs(rnorm(9, sd=1:9,mean = 2)),2)
list <- gen_data(mat =hsk, 100)
hsk <- round(abs(rnorm(9, sd=1:9,mean = 2)),2)
list <- gen_data(mat =hsk, 100)
hsk <- round(abs(rnorm(9, sd=1:9,mean = 2)),2)
list <- gen_data(mat =hsk, 100)
hsk <- round(abs(rnorm(9, sd=1:9,mean = 2)),2)
list <- gen_data(mat =hsk, 100)
hsk
hsk <- round(abs(rnorm(9, sd=1:4,mean = 2)),2)
list <- gen_data(mat =hsk, 100)
hsk
hsk <- round(abs(rnorm(9, sd=1:9,mean = 2)),2)
hsk
list <- gen_data(mat =hsk, 100)
n <- 1000
x <- rgamma(n, shape=6, scale=1/2)
x
x <- matrix(rgamma(n, shape=6, scale=1/2),ncol = 3)
n <- 300
x <- matrix(rgamma(n, shape=6, scale=1/2),ncol = 3)
x
## Wrap Ali Gen data
gen_data <- function(mat,N) {
#sig <- matrix(mat, nrow=3)
#M = mvrnorm(n = N, mu = rep(1,3), Sigma = sig, )
#generate heteroskedastic data
X <- matrix(rgamma(N, shape=6, scale=1/2),ncol = 3)
y.cont = 1 + 2* M[,1] - 5 * M[,2] + M[,3] + rnorm(N)
y.bin = as.numeric ( y.cont > 0 )
X = cbind (1, M )
y = y.cont
#df <- data.frame(X,y)
xy <- list("X"=X,"y"=y)
return (xy)
}
list <- gen_data(N= 100)
gen_data <- function(N,ncol=3) {
#sig <- matrix(mat, nrow=3)
#M = mvrnorm(n = N, mu = rep(1,3), Sigma = sig, )
#generate heteroskedastic data
X <- matrix(rgamma(N, shape=6, scale=1/2),ncol = ncol)
y.cont = 1 + 2* M[,1] - 5 * M[,2] + M[,3] + rnorm(N)
y.bin = as.numeric ( y.cont > 0 )
X = cbind (1, M )
y = y.cont
#df <- data.frame(X,y)
xy <- list("X"=X,"y"=y)
return (xy)
}
list <- gen_data(N= 300)
## Wrap Ali Gen data
gen_data <- function(N,ncol=3) {
#sig <- matrix(mat, nrow=3)
#M = mvrnorm(n = N, mu = rep(1,3), Sigma = sig, )
#generate heteroskedastic data
M <- matrix(rgamma(N, shape=6, scale=1/2),ncol = ncol)
y.cont = 1 + 2* M[,1] - 5 * M[,2] + M[,3] + rnorm(N)
y.bin = as.numeric ( y.cont > 0 )
X = cbind (1, M )
y = y.cont
#df <- data.frame(X,y)
xy <- list("X"=X,"y"=y)
return (xy)
}
list <- gen_data(N= 300)
reg <- lm(list$y ~ list$X[,3])
## Wrap Ali Gen data
gen_data <- function(N,ncol=3) {
#sig <- matrix(mat, nrow=3)
#M = mvrnorm(n = N, mu = rep(1,3), Sigma = sig, )
#generate heteroskedastic data
M <- matrix(rgamma(N, shape=6, scale=1/2),ncol = ncol)
y.cont = 1 + 2* M[,1] - 5 * M[,2] + M[,3] + rnorm(N/ncol)
y.bin = as.numeric ( y.cont > 0 )
X = cbind (1, M )
y = y.cont
#df <- data.frame(X,y)
xy <- list("X"=X,"y"=y)
return (xy)
}
list <- gen_data(N= 300)
reg <- lm(list$y ~ list$X[,3])
plot(reg)
list <- gen_data(N= 900)
reg <- lm(list$y ~ list$X[,3])
plot(reg)
reg <- lm(list$y ~ list$X[,2])
plot(reg)
reg <- lm(list$y ~ list$X[,4])
plot(reg)
gen_data <- function(N,ncol=3) {
#sig <- matrix(mat, nrow=3)
#M = mvrnorm(n = N, mu = rep(1,3), Sigma = sig, )
#modify function to generate heteroskedastic data
M <- matrix(rgamma(N, shape=8, scale=1/2),ncol = ncol)
y.cont = 1 + 2* M[,1] - 5 * M[,2] + M[,3] + rnorm(N/ncol) ##modified
y.bin = as.numeric ( y.cont > 0 )
X = cbind (1, M )
y = y.cont
#df <- data.frame(X,y)
xy <- list("X"=X,"y"=y)
return (xy)
}
list <- gen_data(N= 900)
reg <- lm(list$y ~ list$X[,4])
plot(reg)
reg <- lm(list$y ~ list$X[,3])
plot(reg)
#modify function to generate heteroskedastic data
M <- matrix(rgamma(N, shape=3, scale=1/2),ncol = ncol)
y.cont = 1 + 2* M[,1] - 5 * M[,2] + M[,3] + rnorm(N/ncol) ##modified
y.bin = as.numeric ( y.cont > 0 )
X = cbind (1, M )
y = y.cont
#df <- data.frame(X,y)
xy <- list("X"=X,"y"=y)
return (xy)
}
gen_data <- function(N,ncol=3) {
#sig <- matrix(mat, nrow=3)
#M = mvrnorm(n = N, mu = rep(1,3), Sigma = sig, )
#modify function to generate heteroskedastic data
M <- matrix(rgamma(N, shape=5, scale=1/2),ncol = ncol)
y.cont = 1 + 2* M[,1] - 5 * M[,2] + M[,3] + rnorm(N/ncol) ##modified
y.bin = as.numeric ( y.cont > 0 )
X = cbind (1, M )
y = y.cont
#df <- data.frame(X,y)
xy <- list("X"=X,"y"=y)
return (xy)
}
list <- gen_data(N= 900)
reg <- lm(list$y ~ list$X[,])
plot(reg)
#M = mvrnorm(n = N, mu = rep(1,3), Sigma = sig, )
#modify function to generate heteroskedastic data
M <- matrix(rgamma(N, shape=4, scale=1/2),ncol = ncol)
y.cont = 1 + 2* M[,1] - 5 * M[,2] + M[,3] + rnorm(N/ncol) ##modified
y.bin = as.numeric ( y.cont > 0 )
X = cbind (1, M )
y = y.cont
#df <- data.frame(X,y)
xy <- list("X"=X,"y"=y)
return (xy)
}
## Wrap Ali Gen data
gen_data <- function(N,ncol=3) {
#sig <- matrix(mat, nrow=3)
#M = mvrnorm(n = N, mu = rep(1,3), Sigma = sig, )
#modify function to generate heteroskedastic data
M <- matrix(rgamma(N, shape=6, scale=1/2),ncol = ncol)
y.cont = 1 + 2* M[,1] - 5 * M[,2] + M[,3] + rnorm(N/ncol) ##modified
y.bin = as.numeric ( y.cont > 0 )
X = cbind (1, M )
y = y.cont
#df <- data.frame(X,y)
xy <- list("X"=X,"y"=y)
return (xy)
}
list <- gen_data(N= 900)
reg <- lm(list$y ~ list$X[,])
plot(reg)
summary(reg)
gen_data <- function(N,ncol=3) {
#sig <- matrix(mat, nrow=3)
#M = mvrnorm(n = N, mu = rep(1,3), Sigma = sig, )
#modify function to generate heteroskedastic data
M <- matrix(rgamma(N, shape=6, scale=1/2),ncol = ncol)
y.cont = 1 + 2* M[,1] - 5 * M[,2] + M[,3] + rnorm(N/ncol) ##modified
y.bin = as.numeric ( y.cont > 0 )
X = cbind (1, M )
y = y.cont
#df <- data.frame(X,y)
xy <- list("X"=X,"y"=y)
return (xy)
}
list <- gen_data(N= 2700)
reg <- lm(list$y ~ list$X[,3])
plot(reg)
summary(reg)
plot(reg)
plot(list$y, list$X[,3])
rgamma(N, shape=6, scale=1/2)
rgamma(N, shape=6, scale=3/2)
rgamma(N, shape=2, scale=1/2)
plot(rgamma(N, shape=6, scale=1/2))
plot(rgamma(N, shape=6, scale=1/2))
plot(rgamma(N, shape=6, scale=1/2))
plot(rgamma(N, shape=6, scale=1/2))
plot(rgamma(N, shape=3, scale=1/2))
plot(rgamma(N, shape=3, scale=1/2))
plot(rgamma(N, shape=1, scale=1/2))
plot(rgamma(N, shape=1, scale=2))
plot(rgamma(N, shape=1, scale=2))
plot(rgamma(N, shape=1, scale=2))
plot(rgamma(N, shape=1, scale=2))
plot(rgamma(N, shape=1, scale=2))
plot(rgamma(N, shape=1, scale=2))
plot(rgamma(N, shape=1, scale=2))
plot(rgamma(N, shape=1, scale=2))
plot(rgamma(N, shape=1, scale=2))
## Wrap Ali Gen data
gen_data <- function(N,ncol=3) {
#sig <- matrix(mat, nrow=3)
#M = mvrnorm(n = N, mu = rep(1,3), Sigma = sig, )
#modify function to generate heteroskedastic data
M <- matrix(rgamma(N, shape=1, scale=1/2),ncol = ncol)
y.cont = 1 + 2* M[,1] - 5 * M[,2] + M[,3] + rnorm(N/ncol) ##modified
y.bin = as.numeric ( y.cont > 0 )
X = cbind (1, M )
y = y.cont
#df <- data.frame(X,y)
xy <- list("X"=X,"y"=y)
return (xy)
}
list <- gen_data(N= 2700)
reg <- lm(list$y ~ list$X[,3])
plot(reg)
plot(list$y, list$X[,3])
list <- gen_data(N= 2700)
reg <- lm(list$y ~ list$X[,3])
summary(reg)
plot(reg)
bootReg <- function (formula, data, indices)
{
d <- data [i,]
fit <- lm(formula, data = d)
return(coef(fit))
#function to run bootstrapped
bootReg <- function (formula, data, indices)
{
d <- data [i,]
fit <- lm(formula, data = d)
return(coef(fit))
}
df <- data.frame(list$y, list$X[,3])
df <- data.frame(list$y, list$X[,3])
df
;
df
df <- data.frame(list$y, list$X[,3])
View(df)
plot(df)
View(df)
df <- data.frame(y = list$y, x = list$X[,3])
View(df)
bootResults<-boot(statistic = bootReg, formula = y ~ x, data = df, R = 2000)
bootReg <- function (formula, data, indices)
{
d <- data [i,]
fit <- lm(formula, data = d)
return(coef(fit))
}
library("boot")
library(boot)
#function to run bootstrapped
bootReg <- function (formula, data, indices)
{
d <- data [i,]
fit <- lm(formula, data = d)
return(coef(fit))
}
bootResults<-boot(statistic = bootReg, formula = y ~ x, data = df, R = 2000)
View(df)
#store as a dataframe
df <- data.frame(y = list$y, x = list$X[,3])
library(boot)
#function to run bootstrapped
bootReg <- function (formula, data, indices)
{
d <- data [i,]
fit <- lm(formula, data = d)
return(coef(fit))
}
bootResults<-boot(statistic = bootReg, formula = y ~ x, data = df, R = 2000)
df <- data.frame(y = list$y, x = list$X[,3], x1 = list$X[,2] )
View(df)
plot(list$y, list$X[,3])
plot(list$y, list$X[,2])
plot(list$y, list$X[,2]+list$X[,3])
df <- data.frame(y = list$y, x = list$X[,3], x1 = list$X[,2])
library(boot)
#function to run bootstrapped
bootReg <- function (formula, data, indices)
{
d <- data [i,]
fit <- lm(formula, data = d)
return(coef(fit))
}
bootResults<-boot(statistic = bootReg, formula = y ~ x+x1, data = df, R = 2000)
#store as a dataframe
df <- data.frame(y = list$y, x = list$X[,3], x1 = list$X[,2])
library(boot)
#function to run bootstrapped
bootReg <- function (formula, data, i)
{
d <- data [i,]
fit <- lm(formula, data = d)
return(coef(fit))
}
bootResults<-boot(statistic = bootReg, formula = y ~ x+x1, data = df, R = 2000)
reg.initial <- lm(list$y ~ list$X[,3],list$X[,2] )
confint(reg.initial)
reg.initial <- lm(list$y ~ list$X[,3]+list$X[,2])
confint(reg.initial)
#store as a dataframe
df <- data.frame(y = list$y, x = list$X[,3], x1 = list$X[,2])
library(boot)
#function to run bootstrapped
bootReg <- function (formula, data, i)
{
d <- data [i,]
fit <- lm(formula, data = d)
return(coef(fit))
}
bootResults<-boot(statistic = bootReg, formula = y ~ x+x1, data = df, R = 2000)
confint(reg.initial)
boot.ci(bootResults, type = "bca", index = 2)
boot.ci(bootResults, type = "bca", index = 3)
##regress y vs 2nd variable
reg <- lm(list$y ~ list$X[,3])
##regress y vs 1st variable
reg1 <- plot(list$y, list$X[,3)
plot(reg)
plot(list$y, list$X[,2)
plot(reg1)
reg1 <- plot(list$y, list$X[,3)
reg1 <- plot(list$y, list$X[,2])
plot(reg1)
plot(reg1)
reg1 <- lm(list$y ~ list$X[,2])
plot(reg1)
library(lmtest)
install.packages(lmtest)
install.packages("lmtest")
library(lmtest)
coeftest(reg.initial,  vcov = vcovHC)
summary(reg.initial)
reg.initial$coefficients
vcovHC(reg.initial)
install.packages("sandwich")
library(sandwich)
coeftest(reg.initial,  vcov = vcovHC)
coeftest(reg.initial,  vcov = vcovHC)
coeftest(reg.initial,  vcov = vcovHC)
coeftest(reg.initial,  vcov = vcovHC)
coeftest(reg.initial,  vcov = vcovHC)
coeftest(bootResults,  vcov = vcovHC)
coeftest(reg.initial,  vcov = vcovHC)
reg.initial
summary(reg.initial)
coeftest(reg.initial,  vcov = vcovHC)
waldtest(reg.initial, vcov = vcovHC)
rm( list = ls() )
setwd("/Users/ceccarelli/MIDS/DATASCI_W203/Async Material and Sample Files /")
load("Countries3.Rdata")
summary(Countries)
f_led= c("Germany", "Liberia", "Argentina", "Bangladesh", "Lithuania", "Costa Rica", "Trinidad and Tobago", "St Maarten", "Bermuda", "Brazil", "Kosovo", "Thailand", "Denmark", "Jamaica", "Malawi", "South Korea", "San Marino", "Norway")
match(c("Germany"), Countries$Country)
View(Countries)
match(f_led, Countries$Country)
f_led[is.na(match(f_led, Countries$Country))]
f_led[is.na(match(f_led, Countries$Country))]
View(Countries)
Countries$female_led = Countries$Country %in% f_led
summary(Countries$female_led)
View(Countries)
lim_rows = complete.cases(Countries$contraception, Countries$gdp, Countries$infant.mortality)
lim_rows
Countries_lim = Countries[lim_rows,]
install.packages("PASWR")
library(PASWR)
?titanic3
summary(titanic)
summary(titanic3)
complete.cases(titanic3$survived, titanic$parch)
complete.cases(titanic3$survived, titanic3$parch)
summary(complete.cases(titanic3$survived, titanic3$parch))
attach(titanic3)
model1 <- glm(survived ~ parch, family=binomial())
summary(model1)
summary(survived)
plot(model1)
plot(survived,parch)
abline(model1)
abline(model1)
abline(model1$coefficients)
View(survived)
plot(model1)
plot(parch,survived,col="black",pch=1,main="Relationship ",xlab="Parents Children",
ylab="Survived")
lines(parch,predict(model1,type="response"))
summary(complete.cases(titanic3$survived, titanic3$parch, titanic3$boat))
summary(boat)
view(boat)
View(boat)
length(boat)
titanic3$boat2 <- ifelse(length(boat)>0,boat,"No boat")
summary(titanic3$boat2)
summary(titanic3$boat2)
titanic3$boat2 <- ifelse(length(titanic3$boat)>0,boat,"No boat")
summary(titanic3$boat2)
View(titanic3$boat2)
model2 <- glm(survived ~ parch+boat, family=binomial())
plot(parch,survived,boat,col="black",pch=1,main="Relationship ",xlab="Parents Children",
ylab="Survived")
plot(parch,survived+boat,col="black",pch=1,main="Relationship ",xlab="Parents Children",
ylab="Survived")
plot(parch,boat,col="black",pch=1,main="Relationship ",xlab="Parents Children",
ylab="Survived")
factor(boat)
factor(boat)
model.matrix(~factor(boat))
titanic3$boat2 <- ifelse(nchar(boat)>0,boat,"No boat")
titanic3$boat2 <- ifelse(nchar(as.character(titanic3$boat))>0,boat,"No boat")
View(titanic3$boat2)
titanic3$boat2 <- ifelse(nchar(as.character(titanic3$boat))>0,1,0)
View(titanic3$boat2)
model2 <- glm(survived ~ parch+boat, family=binomial())
summary(model2)
model2 <- glm(survived ~ parch+boat2, family=binomial())
model2 <- glm(survived ~ parch+titanic3$boat2, family=binomial())
summary(model2)
plot(model2)
plot(parch,boat2,col="black",pch=1,main="Relationship ",xlab="Parents Children",
plot(parch,boat2,col="black",pch=1,main="Relationship ",xlab="Parents Children", ylab="Survived")
plot(parch,titanic$boat2,col="black",pch=1,main="Relationship ",xlab="Parents Children", ylab="Survived")
plot(parch,titanic$boat2,col="black",pch=1,main="Relationship ",xlab="Parents Children", ylab="Survived")
plot(parch,titanic3$boat2,col="black",pch=1,main="Relationship ",xlab="Parents Children", ylab="Survived")
lines(parch,predict(model2,type="response"))
predict(model2,type="response")
data.frame(predict(model2,type="response"))
rm( list = ls() )
setwd("/Users/ceccarelli/MIDS/DATASCI_W203/Async Material and Sample Files /")
library(PASWR)
?titanic3
summary(titanic3)
summary(complete.cases(titanic3$survived, titanic3$parch, titanic3$boat))
attach(titanic3)
model1 <- glm(survived ~ parch, family=binomial())
summary(model1)
plot(model1)
plot(parch,survived,col="black",pch=1,main="Relationship ",xlab="Parents Children",
ylab="Survived")
lines(parch,predict(model1,type="response"))
predict(model1,type="response")
View(data.frame(predict(model1,type="response")))
table(parch,survived)
sum(table(parch,survived))
table(parch,survived)/sum(table(parch,survived))
data.frame(table(parch,survived)/sum(table(parch,survived)))
df<-data.frame(table(parch,survived)/sum(table(parch,survived)))
table(parch,survived)
rowsum(table(parch,survive))
rowsum(table(parch,survive))
data.frame(table(parch,survive))
rowsum(table(parch,survived))
rowsum(table(parch,survived))
data.frame(table(parch,survived))
rowSum(table(parch,survived))
rowsum(table(parch,survived))
table(parch,survived)
data.frame(table(parch,survived))
as.matrix(table(parch,survived))
mat<-as.matrix(table(parch,survived))
mat
rowsum(mat)
rowsum(mat, group)
rowsum(mat, group=parch)
rowsum(mat, group=mat$parch)
mat<-data.frame(table(parch,survived))
rowsum(mat, group=mat$parch)
rowsums(mat, group=mat$parch)
rowSums(mat, group=mat$parch)
rowSums(mat)
rowSums(data.frame(table(parch,survived)))
mat<-data.frame(table(parch,survived))
mat
transform(mat, sum=rowSums(mat))
mat
transform(mat, sum=rowSums(mat))
transform(mat, sum=rowSums(mat))
transform(mat, sum=rowsum(mat))
mat
mat<-as.matrix(table(parch,survived))
mat
mat[,1]
mat[,2]
mat[,1:2]
mat[,1:1]
as.numeric(mat[,1:2])
by(titanic3$survived, titanic3$parch, FUN = mean)
data.frame(by(titanic3$survived, titanic3$parch, FUN = mean))
names(by(titanic3$survived, titanic3$parch, FUN = mean))
library(car)
load("Countries3.Rdata")
summary(Countries)
scatterplot(Countries$gdp, Countries$internet_users_2011)
model = lm(internet_users_2011 ~ gdp, data = Countries)
summary(model)
plot(model)
dwt(model)
library(car)
load("Videos_clean.Rdata")
summary(Videos)
cor(Videos[,c(3,5:9)], use = "pairwise.complete.obs")
cor(Videos[,c(3,5:9)], use = "pairwise.complete.obs")*100
ifelse(cor(Videos[,c(3,5:9)], use = "pairwise.complete.obs")*100>50, 1,0)
ifelse(cor(Videos[,c(3,5:9)], use = "pairwise.complete.obs")*100>50, "high",0)
ifelse(cor(Videos[,c(3,5:9)], use = "pairwise.complete.obs")*100>5,cor(Videos[,c(3,5:9)], use = "pairwise.complete.obs")*100,0)
