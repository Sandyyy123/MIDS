abline(fit,col="green")
}
regplot(price~sales)
regplot(price,sales)
library(kernlab)
install.packages("kernlab")
install.packages("kernlab")
library(kernlab)
data(kernlab)
?kernlab
??kernlab
data(spam)
View(spam)
View(spam)
r
demo()
install.packages("caret")
rnorm(100,50,2)
rnorm(50,2,2)
rnorm(100,50,2)
n <- 100
power <- .80
sig < .05
sig <- .05
qnorm(.2)
qnorm(.025, lower.tail = FALSE)
qnorm(.2)
z <- (xbar - mu) / (pop.sd /sqrt(n))
testfun <- function(data=c(), mu, pop.sd, two.tailed=TRUE, significance=.05) {
##computed sample mean
xbar <- mean(data)
##computed sample size
n <- length(data)
##compute z score
z <- (xbar - mu) / (pop.sd /sqrt(n))
#modify and compute pvalue depending on type of test required
if (two.tailed==TRUE) {
p <- 2 * pnorm(z, lower.tail = FALSE)
} else if (two.tailed==FALSE & xbar > mu) {
p <- pnorm((z), lower.tail = FALSE)
} else if (two.tailed==FALSE & xbar < mu) {
p <- pnorm((z))
}
#create boolean value depending on
if (p>significance) {
pass <- FALSE
} else {
pass <- TRUE
}
##return a dataframe to make storing replicated results easy
df <- data.frame(p, pass)
colnames(df) <- c("pvalue","pass")
return(df)
}
qnorm(.2)
install.packages(c("dplyr","AER","data.table","forecast"))
rm(list = ls())
nRows <- sum(2572, 486, 2086, 470, 2109)
d <- data.table(group = rep(NA, nRows))
d[ , group := c(rep("baseline", 2572),
rep("treatment", sum(486, 2086)),
rep("placebo", sum(470, 2109)))
]
d[ , treated  := c(rep(0, 2572), rep(1, 486), rep(0, 2086), rep(1, 470), rep(0, 2109)) ]
## fill yes/no function
yesNo <- function(N, pct) {
k <- round(N * pct, 0)
k1 <- N - k
c(rep(1, k), rep(0, k1))
}
d[group == "baseline",                  turnout := yesNo(.N, .3122)]
d[group == "treatment" & treated == 1,  turnout := yesNo(.N, .3909)]
d[group == "treatment" & treated == 0,  turnout := yesNo(.N, .3274)]
d[group == "placebo"   & treated == 1,  turnout := yesNo(.N, .2979)]
d[group == "placebo"   & treated == 0,  turnout := yesNo(.N, .3215)]
rm(list = ls())
nRows <- sum(2572, 486, 2086, 470, 2109)
d <- data.table(group = rep(NA, nRows))
d[ , group := c(rep("baseline", 2572),
rep("treatment", sum(486, 2086)),
rep("placebo", sum(470, 2109)))
]
d[ , treated  := c(rep(0, 2572), rep(1, 486), rep(0, 2086), rep(1, 470), rep(0, 2109)) ]
## fill yes/no function
yesNo <- function(N, pct) {
k <- round(N * pct, 0)
k1 <- N - k
c(rep(1, k), rep(0, k1))
}
rm(list = ls())
nRows <- sum(2572, 486, 2086, 470, 2109)
d <- data.table(group = rep(NA, nRows))
d[ , group := c(rep("baseline", 2572),
rep("treatment", sum(486, 2086)),
rep("placebo", sum(470, 2109)))
]
d[ , treated  := c(rep(0, 2572), rep(1, 486), rep(0, 2086), rep(1, 470), rep(0, 2109)) ]
## fill yes/no function
yesNo <- function(N, pct) {
k <- round(N * pct, 0)
k1 <- N - k
c(rep(1, k), rep(0, k1))
}
d <- data.table(group = rep(NA, nRows))
library(data.table)
rm(list = ls())
nRows <- sum(2572, 486, 2086, 470, 2109)
d <- data.table(group = rep(NA, nRows))
d[ , group := c(rep("baseline", 2572),
rep("treatment", sum(486, 2086)),
rep("placebo", sum(470, 2109)))
]
d[ , treated  := c(rep(0, 2572), rep(1, 486), rep(0, 2086), rep(1, 470), rep(0, 2109)) ]
## fill yes/no function
yesNo <- function(N, pct) {
k <- round(N * pct, 0)
k1 <- N - k
c(rep(1, k), rep(0, k1))
View(d)
View(d)
colnames(df) <- c("pvalue","pass")
;
;;;;
fafa
;
21341+222
;
();
rm(list<-ls())
rm(listls())
rm( list = ls() )
d <- data.frame(running = runif(1000, min = 0, max = 10),
cov1    = rnorm(1000))
install.packages(c("ggplot2"))
View(d)
d$y <- d$running * .5 - .2 * d$cov1 + 1 * I(d$running > 5) + rnorm(1000)
d$y <- d$running * .5 - .2 * d$cov1 + 1 * I(d$running > 5) + rnorm(1000)
View(d)
hist(d$y)
plot(x = d$running, y = d$y, pch = 19, col = rgb(0,1,0, .4), ylim = c(-2, 10))
lines(lowess(x = , y = ))
lines(lowess(x = , y = ))
lines(lowess(x = d$running , y = d$y ))
install.packages(c("stargazer"))
install.packages(c("bestGLM"))
install.packages(c("bestglm"))
?lowess
library(dplyr)
cuttoff <- 5
plot(x = , y = , pch = 19, col = rgb(0,0,1, .4), ylim = c(-2, 10))
View(d)
View(d)
View(d)
d_lower <- d %>%
filter(running < cutoff)
View(d)
d$cutoff <- 5
d_lower <- d %>%
filter(running < cutoff)
d_higher <- d %>%
filter(running > cutoff)
plot(x = d$running , y = d$y , pch = 19, col = rgb(0,0,1, .4), ylim = c(-2, 10))
plot(x = d$running , y = d$y , pch = 19, col = rgb(0,0,1, .4), ylim = c(-2, 10))
lines(lowess(x = d_lower$running , y = d_lower$y ), lwd = 2) # lower than cuttoff
lines(lowess(x = d_higher$running, y = d_higher$y), lwd = 2) # higher than cuttoff
d$cutoff <- 3
d_lower <- d %>%
filter(running < cutoff)
d_higher <- d %>%
filter(running > cutoff)
plot(x = d$running , y = d$y , pch = 19, col = rgb(0,0,1, .4), ylim = c(-2, 10))
lines(lowess(x = d_lower$running, y = d_lower$y ), lwd = 2) # lower than cuttoff
lines(lowess(x = d_higher$running, y = d_higher$y), lwd = 2) # higher than cuttoff
for(i in 1:9) {
d$cutoff <- i
d_lower <- d %>%
filter(running < cutoff)
d_higher <- d %>%
filter(running > cutoff)
plot(x = d$running , y = d$y , pch = 19, col = rgb(0,0,1, .4), ylim = c(-2, 10))
lines(lowess(x = d_lower$running, y = d_lower$y ), lwd = 2) # lower than cuttoff
lines(lowess(x = d_higher$running, y = d_higher$y), lwd = 2) # higher than cuttoff
}
for(i in 1:9) {
d$cutoff <- i
d_lower <- d %>%
filter(running < cutoff)
d_higher <- d %>%
filter(running > cutoff)
plot(x = d$running , y = d$y , pch = 19, col = rgb(0,0,1, .4), ylim = c(-2, 10))
lines(lowess(x = d_lower$running, y = d_lower$y ), lwd = 2) # lower than cuttoff
lines(lowess(x = d_higher$running, y = d_higher$y), lwd = 2) # higher than cuttoff
}
install.packages("rdrobust")
library(rdrobust)
data(rdrobust_RDsenate)
d2 <- rdrobust_RDsenate
with(d2, rdplot(y = vote, x = margin,
title = "RD Plot - Senate Elections Data",
y.label = "Vote Share in Election at time t+1",
x.label = "Vote Share in Election at time t") )
install.packages(c("lubridate","plyr","reshape2"))
installed.packages
installed.packages()
install.packages("memisc")
setwd("MIDS/DATASCI_W241/Assignments/Project/")
pd <- read.csv("pilot_data_11-23.csv")
rm( list = ls() )
## Clear environment variables
rm( list = ls() )
## Set Working Directory
setwd("MIDS/DATASCI_W241/Assignments/Project/")
#load relevant libraries
library(pryr)
library(memisc)
library(stringr)
library(dplyr)
library(ggplot2)
## read in first 5 variables of drive variables data set using
#drive_failures <- read.csv("2013/drive_failures.csv", colClasses = c(rep(NA, 5), rep("NULL", 255)), header = TRUE)
pd <- read.csv("pilot_data_11-23.csv")
View(pd)
pd <- read.csv("pilot_data_11-23.csv", header = TRUE)
View(pd)
rm( list = ls() )
pd <- read.csv("pilot_data_11-23.csv", header = TRUE)
View(pd)
pd <- read.csv("pilot_data_11-23.csv", header = TRUE)
View(pd)
pd <- read.csv("pilot_data_11-23.csv", header = TRUE, skip=1)
pd <- read.csv("pilot_data_11-23.csv", header = TRUE, skip=1)
View(pd)
chartr("�", "", pd)
chartr("�", " ", pd)
pd1 <- chartr("�", " ", pd)
pd1=gsub("�","",pd)
View(pd)
pd1=gsub('�', '',d)
iconv(pd, "latin1", "ASCII", sub="")
pd1 <- iconv(pd, "latin1", "ASCII", sub="")
pd1 <- iconv(pd, "latin1", "ASCII", sub="", toRaw = TRUE)
PD1
pd1
pd
pd[1,]
pd[1,1]
pd[1:1]
pd[1:1]
pd[c(1)]
pd[c(1),]
as.list(pd[c(1),])
as.list(pd[c(0),])
as.list(pd[c(1),])
View(pd)
as.list(pd[c(1),]
as.list(pd[c(1),];
as.list(pd[1,])
as.vector(pd[1,])
cols <- as.vector(pd[1,])
View(cols)
cols[25]
cols[1]
cols[26]
pd1 <- gsub("\xa016","",pd)
pd1 <- gsub("\xa016","",pd)
gsub("\xa016","",pd)
pd1 <- gsub("[^[:alnum:]///' ]", "", x)
pd1 <- as.data.frame(gsub("[^[:alnum:]///' ]", "", x))
pd1 <- as.data.frame(gsub("[^[:alnum:]///' ]", "", pd))
View(pd1)
lapply(pd, function(x) gsub("[^[:alnum:]///' ]", "", x))
pd1 <- as.data.frame(lapply(pd, function(x) gsub("[^[:alnum:]///' ]", "", x)))
View(pd1)
glimpse(pd)
pd <- read.csv("pilot_data_11-23.csv", header = TRUE)
glimpse(pd)
pd <- read.csv("pilot_data_11-23.csv", header = TRUE)
pd <- read.csv("pilot_data_11-23.csv", header = TRUE)
rm( list = ls() )
## Set Working Directory
setwd("MIDS/DATASCI_W241/Assignments/Project/")
#load relevant libraries
library(pryr)
library(memisc)
library(stringr)
library(dplyr)
library(ggplot2)
pd <- read.csv("pilot_data_11-23.csv", header = TRUE)
glimpse(pd)
View(pd)
x <- read.csv("pilot_data_11-23.csv", header=FALSE, stringsAsFactors=FALSE, fileEncoding="latin1")
View(x)
pd <- read.csv("pilot_data_11-23.csv", header=FALSE, stringsAsFactors=FALSE, fileEncoding="latin1")
pd <- read.csv("pilot_data_11-23.csv", header=TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
colnames(pdf)
colnames(pd)
pd1 <- as.data.frame(lapply(pd, function(x) gsub("[^[:alnum:]///' ]", "", x)))
View(pd1)
pd <- read.csv("pilot_data_11-23.csv", header=TRUE, stringsAsFactors=FALSE
, fileEncoding="latin1", na.strings=c("","NA"))
View(pd)
coalesce2 <- function(...) {
Reduce(function(x, y) {
i <- which(is.na(x))
x[i] <- y[i]
x},
list(...))
}
rm( list = ls() )
setwd("MIDS/DATASCI_W241/Assignments/Project/")
library(pryr)
library(memisc)
library(stringr)
library(dplyr)
library(ggplot2)
library(data.table)
pd <- read.csv("pilot_data_11-23.csv", header=TRUE, stringsAsFactors=FALSE
, fileEncoding="latin1", na.strings=c("","NA"))
rm( list = ls() )
pd.raw <- read.csv("pilot_data_11-23.csv", header=TRUE, stringsAsFactors=FALSE
, fileEncoding="latin1", na.strings=c("","NA"))
View(pd.raw)
library(lubridate)
View(pd.raw)
is.Date(c("11/22/2015 12:53"))
c("11/22/2015 12:53")
c(11/22/2015 12:53)
"11/22/2015 12:53"
pd.raw[1,8]
pd.raw[2,8]
is.Date(pd.raw[2,8])
now
now()
?lubridate-package
lubridate?
;
help lubridate::
help lubridate
x <- c("09-01-01", "09-01-02", "09-01-03")
x
parse_date_time(x, "ymd")
parse_date_time(x, "%y%m%d")
mdy(c("11/22/2015 12:53"))
x<- c("11/22/2015 12:53"))
x<- c("11/22/2015 12:53")
x
x[1,10]
x[1:10]
x[1,10,]
substring(x,1,10)
dmy(substring(x,1,10))
dmy(gsub("/","-",substring(x,1,10)))
gsub("/","-",substring(x,1,10))
mdy(gsub("/","-",substring(x,1,10)))
mdy(gsub("/","-",substring(x,1,10)))
x
mdy_hm(x)
mdy_hm(x, tz = )
mdy_hm("11/22/2015 12:56")
mdy_hm("11/22/2015 12:56") - mdy_hm(x, tz = )
pd.gen <- pd.raw %>%
select(IPaddress, mdy_hm(StartDate) as SuveryStart)
pd.gen <- pd.raw %>%
select(IPaddress, StartDate as SuveryStart)
pd.gen <- pd.raw %>%
select(IPaddress, StartDate)
pd.gen <- pd.raw %>%
select(IPAddress, StartDate)
pd.gen <- pd.raw %>% select(IPAddress, StartDate)
View(pd.raw)
pd.gen <- pd.raw %>% select(V6 as IPAddress)
pd.gen <- pd.raw %>% rename(V6 = IPAddress)
pd.gen <- pd.raw %>% rename(V6 = "IPAddress")
View(pd.gen)
pd.gen <- pd.raw %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate")
pd.gen <- pd.raw %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
select(start_with("_gen_"))
pd.gen <- pd.raw %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
select(starts_with("_gen_"))
View(pd.gen)
pd.gen <- pd.raw %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
slice(2:) %>%
select(starts_with("_gen_"))
pd.gen <- pd.raw %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
slice(2:nrows(pd.raw))
pd.gen <- pd.raw[2:15] %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
select(starts_with("_gen_"))
View(pd.raw)
pd.gen <- pd.raw[2:15]
View(pd.gen)
pd.gen <- pd.raw[2:15,] %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
select(starts_with("_gen_"))
View(pd.gen)
pd.gen <- pd.raw[2:length(pd.raw),] %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
select(starts_with("_gen_"))
pd.gen <- pd.raw[2:length(pd.raw),] %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
select(starts_with("_gen_"))
length(pd.raw)
pd.gen <- pd.raw[2:nrows(pd.raw),] %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
select(starts_with("_gen_"))
pd.gen <- pd.raw[2:nrow(pd.raw),] %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
select(starts_with("_gen_"))
View(pd.gen)
pd.gen <- pd.raw[2:nrow(pd.raw),] %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
mutate(_gen_StartDate = mdy_hs(_gen_StartDate)) %>%
select(starts_with("_gen_"))
pd.gen <- pd.raw[2:nrow(pd.raw),] %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
mutate("_gen_StartDate" = mdy_hs("_gen_StartDate")) %>%
select(starts_with("_gen_"))
pd.gen <- pd.raw[2:nrow(pd.raw),] %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
mutate("_gen_StartDate" = mdy_hm("_gen_StartDate")) %>%
select(starts_with("_gen_"))
pd.gen <- pd.raw[2:nrow(pd.raw),] %>% rename(V6 = "_gen_IPAddress",
V8 = "_gen_StartDate",
V9 = "_gen_EndDate") %>%
mutate("_gen_StartDate" = lubridate::mdy_hm("_gen_StartDate")) %>%
select(starts_with("_gen_"))
pd.raw$V8
mdy_hm(pd.raw$V8)
mdy_hm(pd.raw[2:nrow(pd.raw)]$V8)
pd.gen <- pd.raw[2:nrow(pd.raw),] %>% rename(V6 = "gen_IPAddress",
V8 = "gen_StartDate",
V9 = "gen_EndDate") %>%
select(starts_with("gen_"))
pd.gen <- pd.gen %>%
mutate(gen_StartDate = lubridate::mdy_hm(_gen_StartDate))
pd.gen <- pd.gen %>%
mutate(gen_StartDate = lubridate::mdy_hm(gen_StartDate))
View(pd.gen)
pd.gen <- pd.gen %>%
mutate(gen_TimeSpend = mdy_hm(gen_StartDate))
View(pd.gen)
View(pd.raw)
View(pd.gen)
pd.gen <- pd.gen %>%
transmute(gen_StartDate = mdy_hm(gen_StartDate), gen_StartDate = mdy_hm(gen_EndDate)) %>%
mutate(gen_TimeSpent = gen_EndDate - gen_StartDate)
pd.gen <- pd.gen %>%
select(gen_StartDate = mdy_hm(gen_StartDate), gen_StartDate = mdy_hm(gen_EndDate)) %>%
mutate(gen_TimeSpent = gen_EndDate - gen_StartDate)
dplyr::mutate
pd.gen <- pd.gen %>%
mutate(gen_StartDate = mdy_hm(gen_StartDate), gen_StartDate = mdy_hm(gen_EndDate), gen_TimeSpent = gen_EndDate - gen_StartDate)
pd.gen <- pd.raw[2:nrow(pd.raw),] %>% rename(V6 = "gen_IPAddress",
V8 = "StartDate",
V9 = "EndDate") %>%
mutate(gen_StartDate = mdy_hm(StartDate), gen_StartDate = mdy_hm(EndDate), gen_TimeSpent = gen_EndDate - gen_StartDate)
pd.gen <- pd.raw[2:nrow(pd.raw),] %>% rename(V6 = "gen_IPAddress",
V8 = "StartDate",
V9 = "EndDate") %>%
mutate(gen_StartDate = mdy_hm(StartDate), gen_EndDate = mdy_hm(EndDate), gen_TimeSpent = gen_EndDate - gen_StartDate)
View(pd.gen)
pd.gen <- pd.raw[2:nrow(pd.raw),] %>% rename(V6 = "gen_IPAddress",
V8 = "StartDate",
V9 = "EndDate") %>%
mutate(gen_StartDate = mdy_hm(StartDate), gen_EndDate = mdy_hm(EndDate), gen_TimeSpentMinutes = gen_EndDate - gen_StartDate) %>%
select(starts_with("gen_"))
View(pd.gen)
View(pd.raw)
pd.gen <- pd.raw[2:nrow(pd.raw),] %>% rename(V6 = "gen_IPAddress",
V8 = "StartDate",
V9 = "EndDate") %>%
##leverage lubridate mdy_hm to convert to dates
mutate(gen_StartDate = mdy_hm(StartDate), gen_EndDate = mdy_hm(EndDate)
, gen_TimeSpentMinutes = gen_EndDate - gen_StartDate) %>%
##only retain those observations that finished
filter(V10 == 1) %>%
##only retain "gen_" columns
select(starts_with("gen_"))
View(pd.gen)
str(dplyr)
str(dplyr::)
old.packages
old.packages()
update.packages("dplyr")
dplyr
library(dplyr)
flights
library(nycflights13)
?nycflights13
??nycflights13
mtcars
slice(mtcars,1:15)
dplyr::slice(mtcars,1:15)
